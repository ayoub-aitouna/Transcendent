version: "3"
services:
  nextjs_frontend:
    restart: always
    container_name: nextjs_frontend
    build:
      context: ./nextjs-frontend/build-tools
    networks:
      - mynetwork
    ports:
      - "3000:3000"
    volumes:
      - nextjs_frontend_volume:/var/app
    depends_on:
      - django_backend

  django_backend:
    restart: always
    container_name: django_backend
    build:
      context: ./django-backend/build-tools
    command: ["python3", "manage.py", "runserver", "0.0.0.0:8000"]
    networks:
      - mynetwork
    ports:
      - "8000:8000"
    volumes:
      - django_backend_volume:/var/app
    depends_on:
      - db
      - redis

  # celery:
  #   restart: always
  #   container_name: celery
  #   build:
  #     context: ./django-backend/build-tools
  #   command: ["celery", "-A", "transcendent", "worker", "--loglevel=info"]
  #   networks:
  #     - mynetwork
  #   volumes:
  #     - django_backend_volume:/var/app
  #   depends_on:
  #     - redis

  redis:
    restart: always
    container_name: redis
    build:
      context: ./redis
    networks:
      - mynetwork
    expose:
      - 6379

  db:
    image: postgres
    restart: always
    shm_size: 128mb
    networks:
      - mynetwork
    volumes:
      - db_volume:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456

  adminer:
    image: adminer
    restart: always
    networks:
      - mynetwork
    ports:
      - 8080:8080
    depends_on:
      - db

volumes:
  django_backend_volume:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "${PWD}/src/django-backend/"

  nextjs_frontend_volume:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "${PWD}/src/nextjs-frontend"
  db_volume:

networks:
  mynetwork:
    driver: bridge
